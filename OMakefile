########################################################################
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this file, to deal in the File without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the File, and to permit persons to whom the
# File is furnished to do so, subject to the following condition:
#
# THE FILE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
# OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE FILE OR
# THE USE OR OTHER DEALINGS IN THE FILE.

########################################################################
# The standard OMakefile.
# You will usually need to modify this file for your project.

########################################################################
# Phony targets are scoped, so you probably want to declare them first.
#

.PHONY: all install clean

########################################################################
# Subdirectories.
# You may want to include some subdirectories in this project.
# If so, define the subdirectory targets and uncomment this section.
#

# traverse the subdirs except $(dirs)
Subdirs_except(dirs) =
 #println(PWD: $(shell pwd))

 # need to export since .SUBDIRS is evaluated in the global scope
 export VISIT_SUBDIRS

 sub_omakefiles = $(glob i, */OMakefile)
 subdirs = $(sub_omakefiles.map $(dirname))

 VISIT_SUBDIRS=$(set-diff $(subdirs), $(dirs))

 # printing requires $(string ...) to convert arrays to strings
 #println(SUBDIRS: $(string $(VISIT_SUBDIRS)))

 # The rule
 .SUBDIRS: $(VISIT_SUBDIRS)

# traverse all the subdirs
Subdirs() =
 Subdirs_except($(array))

Subdirs()

########################################################################
# OCaml configuration.
#

################################################
# Configuration.  You may want to modify any of these configuration
# variables.
#

#
# This project requires ocamlfind (default - false).
#
# USE_OCAMLFIND = true
#
# OCAMLPACKS[] =
#    pack1
#    pack2
#
# if $(not $(OCAMLFIND_EXISTS))
#    eprintln(This project requires ocamlfind, but is was not found.)
#    eprintln(You need to install ocamlfind and run "omake --configure".)
#    exit 1

#
# Include path
#
# OCAMLINCLUDES +=

#
# Compile native or byte code? 
#
# The default values are defined as follows:
#
# NATIVE_ENABLED = $(OCAMLOPT_EXISTS)
# BYTE_ENABLED = $(not $(OCAMLOPT_EXISTS))

#
# Various options
#
OCAMLFLAGS    += -warn-error x
# OCAMLCFLAGS   +=
#OCAMLOPTFLAGS += -inline 10
# OCAML_LINK_FLAGS +=
# OCAML_BYTE_LINK_FLAGS +=
# OCAML_NATIVE_LINK_FLAGS +=
NATIVE_ENABLED = true
BYTE_ENABLED = false

################################################
# Generated files
#
# Workaround for the fact that ocamldep does not pay attention to .mll
# and .mly files.
#
# OCamlGeneratedFiles(parser.ml lexer.ml)

################################################
# Build an OCaml program
#

FILES[] =
	ocamlmemcached

PROGRAM = ocamlmemcached
# OCAML_LIBS +=
# OCAML_CLIBS +=
OCAML_OTHER_LIBS += unix str
# OCAML_LIB_FLAGS +=
#
.DEFAULT: $(OCamlProgram $(PROGRAM), $(FILES))

clean:
	rm -f $(filter-proper-targets $(ls R, .))